if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" languages
if empty(glob('~/.local/share/nvim/plugged/nvim-treesitter/parser/kotlin.so'))
  autocmd VimEnter * TSInstall kotlin
endif
if empty(glob('~/.local/share/nvim/plugged/nvim-treesitter/parser/json.so'))
  autocmd VimEnter * TSInstall json
endif
if empty(glob('~/.local/share/nvim/plugged/nvim-treesitter/parser/bash.so'))
  autocmd VimEnter * TSInstall bash
endif
if empty(glob('~/.local/share/nvim/plugged/nvim-treesitter/parser/graphql.so'))
  autocmd VimEnter * TSInstall graphql
endif
if empty(glob('~/.local/share/nvim/plugged/nvim-treesitter/parser/cpp.so'))
  autocmd VimEnter * TSInstall cpp
endif
if empty(glob('~/.local/share/nvim/plugged/nvim-treesitter/parser/javascript.so'))
  autocmd VimEnter * TSInstall javascript
endif
if empty(glob('~/.local/share/nvim/plugged/nvim-treesitter/parser/regex.so'))
  autocmd VimEnter * TSInstall regex
endif
if empty(glob('~/.local/share/nvim/plugged/nvim-treesitter/parser/python.so'))
  autocmd VimEnter * TSInstall python
endif
if empty(glob('~/.local/share/nvim/plugged/nvim-treesitter/parser/vue.so'))
  autocmd VimEnter * TSInstall vue
endif
if empty(glob('~/.local/share/nvim/plugged/nvim-treesitter/parser/haskell.so'))
  autocmd VimEnter * TSInstall haskell
endif




call plug#begin('~/.local/share/nvim/plugged')

Plug 'tpope/vim-surround' 
Plug 'scrooloose/nerdcommenter'
Plug 'Yggdroot/indentLine'
Plug 'lukas-reineke/indent-blankline.nvim'
Plug 'junegunn/vim-easy-align'
Plug 'easymotion/vim-easymotion'
Plug 'itchyny/lightline.vim'
Plug 'wesQ3/vim-windowswap'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
Plug 'mbbill/undotree'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'mattn/emmet-vim'
Plug 'chriskempson/base16-vim'
Plug 'adelarsq/vim-hackernews'
Plug 'tpope/vim-sensible'
Plug 'majutsushi/tagbar'
Plug 'ludovicchabant/vim-gutentags'
Plug 'dense-analysis/ale'
Plug 'tpope/vim-repeat'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-compe'
Plug 'norcalli/nvim-colorizer.lua'
" We recommend updating the parsers on update
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
"items after this might be deleted
Plug 'janko/vim-test'
Plug 'junegunn/vader.vim'
"Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
call plug#end()

let mapleader=","

set background=dark

" tag bar
nnoremap tt :TagbarToggle<CR>

" easymotion
map <Leader> <Plug>(easymotion-prefix)
map s <Plug>(easymotion-s)

inoremap jk <Esc>

noremap H ^
noremap L $

noremap J 10j
noremap K 10k

set number

" nerd commenter values

" Create default mappings
let g:NERDCreateDefaultMappings = 1
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

"vim indentLine config
let g:indentLine_char = '▏'

"limelight doesn't support the colorscheme so just makes everything not
"highlighted grey
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240


if filereadable(expand("~/.vim/vimrc_background"))
	let base16colorspace=256
	source ~/.vim/vimrc_background
endif


set expandtab
set shiftwidth=2
set tabstop=2

filetype plugin indent on

set smartcase
set ignorecase
syntax on

" quickfix open
noremap <F9>  :execute "vertical botright copen \| vertical resize 60"<cr>
noremap <F10> :execute "copen \| resize 40"<cr>

let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_auto_sameids = 1

" Error and warning signs.
let g:ale_sign_error = '⤫'
let g:ale_sign_warning = '⚠'

" Enable integration with airline.
"let g:airline#extensions#ale#enabled = 1

autocmd BufNewFile,BufRead *.shlib set filetype=sh

"nvim-compe
let g:compe = {}
let g:compe.enabled = v:true
let g:compe.autocomplete = v:true
let g:compe.debug = v:false
let g:compe.min_length = 1
let g:compe.preselect = 'enable'
let g:compe.throttle_time = 80
let g:compe.source_timeout = 200
let g:compe.incomplete_delay = 400
let g:compe.max_abbr_width = 100
let g:compe.max_kind_width = 100
let g:compe.max_menu_width = 100
let g:compe.documentation = v:true

let g:compe.source = {}
let g:compe.source.path = v:true
let g:compe.source.buffer = v:true
let g:compe.source.calc = v:true
let g:compe.source.nvim_lsp = v:true
let g:compe.source.nvim_lua = v:true
let g:compe.source.vsnip = v:true
set completeopt=menuone,preview


" enable tab for autocomplete selection
inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm('<CR>')
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })


" lua << EOF
" require'lspconfig'.kotlin_language_server.setup{}
" EOF



lua << EOF
local nvim_lsp = require'lspconfig'
local configs = require'lspconfig/configs'
local on_attach = function(client, bufnr)
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
end
nvim_lsp.util.default_config = vim.tbl_extend(
  "force",
  nvim_lsp.util.default_config,
  { 
    root_dir = function(fname)
      return lspconfig.util.find_git_ancestor(fname) or vim.loop.os_homedir()
    end
  }
)

-- Use a loop to conveniently both setup defined servers 
-- and map buffer local keybindings when the language server attaches
local servers = { "kotlin_language_server" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup { on_attach = on_attach }
end
EOF

